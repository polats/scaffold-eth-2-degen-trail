{
  "address": "0xf2cfe5e11D5DF48296a85Ba9e0932F8E44AD758e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocksToAct",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rollFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rerollFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NFTDeadlineExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NFTNotOwnedByPlayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerDeadlineExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "WaitForNFTTick",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WaitForPlayerTick",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "NFTEntropyUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NFTRoll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "PlayerEntropyUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerRoll",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BlocksToAct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FeeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LastRollForNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LastRollForPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RerollFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RollFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "rerollForNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rerollForPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "rollForNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollForPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6de22ea11c463d3091d4527dfa769016dbecf8698b509d00c5561b288f3a109",
  "receipt": {
    "to": null,
    "from": "0x0BC7220BbB82C10d88fb3469d5330B6522d7645D",
    "contractAddress": "0xf2cfe5e11D5DF48296a85Ba9e0932F8E44AD758e",
    "transactionIndex": 67,
    "gasUsed": "550367",
    "logsBloom": "0x
    "blockHash": "0xb9e7271df4d9fa248e51524665ef835b1f34a34469a22b84f75507ba123b004c",
    "transactionHash": "0xe6de22ea11c463d3091d4527dfa769016dbecf8698b509d00c5561b288f3a109",
    "logs": [],
    "blockNumber": 5725258,
    "cumulativeGasUsed": "9391219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "30",
    "0xfB9b4E40d12cD6a9f22688B6A54E4e8D7E6fF105",
    "10",
    "3"
  ],
  "numDeployments": 1,
  "solcInputHash": "93393282e2059dbe21b2d2abb8b282bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksToAct\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rollFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rerollFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTDeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTNotOwnedByPlayer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerDeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"WaitForNFTTick\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WaitForPlayerTick\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"NFTEntropyUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"PlayerEntropyUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerRoll\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BlocksToAct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LastRollForNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LastRollForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RerollFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RollFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"rerollForNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rerollForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"rollForNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollForPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Moonstream Engineering (engineering@moonstream.to) A Bandit implements a fully on-chain single-player fog-of-war mechanic that produces RNG via two player-submitted transactions. First, a player submits a transaction expressing their intent to generate RNG. Second, the player submits a transaction that uses RNG derived from the block hash of their first transaction. The player has a limited number of blocks to submit the second transaction. If they fail to submit it in time, the entropy is wasted. The player may also elect to re-roll RNG by submitting a new transaction before the block deadline in which they pay a fee to re-roll. If they elect to do this, the block hash of the block in which the transaction representing their intent to re-roll is used as the new source of entropy. The block deadline is then calculated from this transaction block.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Degen Trail bandit contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bandit.sol\":\"Bandit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Bandit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Degen Trail bandit contract\\r\\n * @author Moonstream Engineering (engineering@moonstream.to)\\r\\n *\\r\\n * A Bandit implements a fully on-chain single-player fog-of-war mechanic that produces RNG via two\\r\\n * player-submitted transactions. First, a player submits a transaction expressing their intent to\\r\\n * generate RNG. Second, the player submits a transaction that uses RNG derived from the block hash\\r\\n * of their first transaction.\\r\\n *\\r\\n * The player has a limited number of blocks to submit the second transaction. If they fail to submit\\r\\n * it in time, the entropy is wasted.\\r\\n *\\r\\n * The player may also elect to re-roll RNG by submitting a new transaction before the block deadline\\r\\n * in which they pay a fee to re-roll. If they elect to do this, the block hash of the block in which\\r\\n * the transaction representing their intent to re-roll is used as the new source of entropy. The block\\r\\n * deadline is then calculated from this transaction block.\\r\\n */\\r\\ncontract Bandit {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event PlayerRoll(address indexed player);\\r\\n    event NFTRoll(address indexed tokenAddress, uint256 indexed tokenID);\\r\\n    event PlayerEntropyUsed(address indexed player, uint256 entropy);\\r\\n    event NFTEntropyUsed(address indexed tokenAddress, uint256 indexed tokenID, uint256 entropy);\\r\\n\\r\\n    // Number of blocks that players have to act once. Exceeding this deadline after their roll action\\r\\n    // will result in the roll being wasted.\\r\\n    uint256 public BlocksToAct;\\r\\n\\r\\n    // Fee token (ERC20).\\r\\n    IERC20 public FeeToken;\\r\\n\\r\\n    // Fee for first roll.\\r\\n    uint256 public RollFee;\\r\\n\\r\\n    // Fee for re-roll.\\r\\n    uint256 public RerollFee;\\r\\n\\r\\n    // Block number of last roll for player.\\r\\n    mapping(address => uint256) public LastRollForPlayer;\\r\\n\\r\\n    // Block number for last roll for an NFT.\\r\\n    mapping(address => mapping(uint256 => uint256)) public LastRollForNFT;\\r\\n\\r\\n    error PlayerDeadlineExceeded(address player);\\r\\n    error NFTDeadlineExceeded(address tokenAddress, uint256 tokenID);\\r\\n    error WaitForPlayerTick(address player);\\r\\n    error WaitForNFTTick(address tokenAddress, uint256 tokenID);\\r\\n    error NFTNotOwnedByPlayer(address player, address tokenAddress, uint256 tokenID);\\r\\n\\r\\n    // This is meant to check the game state of the NFT before the roll.\\r\\n    // There is no corresponding _preRollForPlayer, because the player will only be rolling to generate\\r\\n    // items outside of the context of a run.\\r\\n    function _preRollForNFT(address tokenAddress, uint256 tokenID) internal virtual {}\\r\\n    function _postRoll() internal virtual {}\\r\\n\\r\\n    constructor(uint256 blocksToAct, address feeTokenAddress, uint256 rollFee, uint256 rerollFee) {\\r\\n        BlocksToAct = blocksToAct;\\r\\n        FeeToken = IERC20(feeTokenAddress);\\r\\n        RollFee = rollFee;\\r\\n        RerollFee = rerollFee;\\r\\n    }\\r\\n\\r\\n    function _checkNFTOwnership(address player, address tokenAddress, uint256 tokenID) internal view {\\r\\n        IERC721 nft = IERC721(tokenAddress);\\r\\n        if (nft.ownerOf(tokenID) != player) {\\r\\n            revert NFTNotOwnedByPlayer(player, tokenAddress, tokenID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function rollForPlayer() public returns (uint256) {\\r\\n        FeeToken.safeTransferFrom(msg.sender, address(this), RollFee);\\r\\n        LastRollForPlayer[msg.sender] = block.number;\\r\\n        emit PlayerRoll(msg.sender);\\r\\n        _postRoll();\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    function rollForNFT(address tokenAddress, uint256 tokenID) public returns (uint256) {\\r\\n        _checkNFTOwnership(msg.sender, tokenAddress, tokenID);\\r\\n        _preRollForNFT(tokenAddress, tokenID);\\r\\n        FeeToken.safeTransferFrom(msg.sender, address(this), RollFee);\\r\\n        LastRollForNFT[tokenAddress][tokenID] = block.number;\\r\\n        emit NFTRoll(tokenAddress, tokenID);\\r\\n        _postRoll();\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    function _checkPlayerDeadline(address player) internal view {\\r\\n        uint256 elapsed = block.number - LastRollForPlayer[player];\\r\\n        if (elapsed > BlocksToAct) {\\r\\n            revert PlayerDeadlineExceeded(player);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkNFTDeadline(address tokenAddress, uint256 tokenID) internal view {\\r\\n        uint256 elapsed = block.number - LastRollForNFT[tokenAddress][tokenID];\\r\\n        if (elapsed > BlocksToAct) {\\r\\n            revert NFTDeadlineExceeded(tokenAddress, tokenID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _waitForTickForPlayer(address player) internal view {\\r\\n        if (block.number <= LastRollForPlayer[player]) {\\r\\n            revert WaitForPlayerTick(player);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _waitForTickForNFT(address tokenAddress, uint256 tokenID) internal view {\\r\\n        if (block.number <= LastRollForNFT[tokenAddress][tokenID]) {\\r\\n            revert WaitForNFTTick(tokenAddress, tokenID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _entropyForPlayer(address player) internal returns (uint256) {\\r\\n        _checkPlayerDeadline(player);\\r\\n        _waitForTickForPlayer(player);\\r\\n        uint256 entropy = uint256(blockhash(LastRollForPlayer[player]));\\r\\n        emit PlayerEntropyUsed(player, entropy);\\r\\n        delete LastRollForPlayer[player];\\r\\n        return entropy;\\r\\n    }\\r\\n\\r\\n    function _entropyForNFT(address tokenAddress, uint256 tokenID) internal returns (uint256) {\\r\\n        _checkNFTDeadline(tokenAddress, tokenID);\\r\\n        _waitForTickForNFT(tokenAddress, tokenID);\\r\\n        uint256 entropy = uint256(blockhash(LastRollForNFT[tokenAddress][tokenID]));\\r\\n        emit NFTEntropyUsed(tokenAddress, tokenID, entropy);\\r\\n        delete LastRollForNFT[tokenAddress][tokenID];\\r\\n        return entropy;\\r\\n    }\\r\\n\\r\\n    function rerollForPlayer() public returns (uint256) {\\r\\n        _checkPlayerDeadline(msg.sender);\\r\\n        FeeToken.safeTransferFrom(msg.sender, address(this), RerollFee);\\r\\n        LastRollForPlayer[msg.sender] = block.number;\\r\\n        emit PlayerRoll(msg.sender);\\r\\n        _postRoll();\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    function rerollForNFT(address tokenAddress, uint256 tokenID) public returns (uint256) {\\r\\n        _checkNFTOwnership(msg.sender, tokenAddress, tokenID);\\r\\n        _checkNFTDeadline(tokenAddress, tokenID);\\r\\n        FeeToken.safeTransferFrom(msg.sender, address(this), RerollFee);\\r\\n        LastRollForNFT[tokenAddress][tokenID] = block.number;\\r\\n        emit NFTRoll(tokenAddress, tokenID);\\r\\n        _postRoll();\\r\\n        return block.number;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x780270c5329fbb0f03e8413d148d983ce06f3d6ae6ef6801a7123fbb95dfeb8a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161080f38038061080f83398101604081905261002f91610061565b600093909355600180546001600160a01b0319166001600160a01b0393909316929092179091556002556003556100ac565b6000806000806080858703121561007757600080fd5b845160208601519094506001600160a01b038116811461009657600080fd5b6040860151606090960151949790965092505050565b610754806100bb6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063884eaaea11610066578063884eaaea14610125578063be59cce314610138578063d038f2c614610141578063d583985a1461014a578063dabd51021461016a57600080fd5b80632c4d1a49146100a35780632d3762c0146100be578063481531e9146100c65780635c6195e8146100f157806386192d011461011c575b600080fd5b6100ab61017d565b6040519081526020015b60405180910390f35b6100ab6101e4565b6001546100d9906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6100ab6100ff366004610646565b600560209081526000928352604080842090915290825290205481565b6100ab60025481565b6100ab610133366004610646565b610204565b6100ab60005481565b6100ab60035481565b6100ab610158366004610672565b60046020526000908152604090205481565b6100ab610178366004610646565b610291565b6000610188336102bd565b6003546001546101a7916001600160a01b039091169033903090610319565b33600081815260046020526040808220439055517f7b5c464bc5b5d9f749f7a2af770c5a8ef3cc7edd8b9efa875112bbd69255fd8e9190a2504390565b6002546001546000916101a7916001600160a01b03169033903090610319565b6000610211338484610379565b61021b838361042a565b60035460015461023a916001600160a01b039091169033903090610319565b6001600160a01b0383166000818152600560209081526040808320868452909152808220439055518492917f1b1920a7f91d6b0fd205bb210302351b28e6e8a9178571676f7da29e84500aeb91a350435b92915050565b600061029e338484610379565b60025460015461023a916001600160a01b039091169033903090610319565b6001600160a01b0381166000908152600460205260408120546102e0904361068f565b90506000548111156103155760405163afa07b8160e01b81526001600160a01b03831660048201526024015b60405180910390fd5b5050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610373908590610494565b50505050565b6040516331a9108f60e11b81526004810182905282906001600160a01b038581169190831690636352211e90602401602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e991906106b0565b6001600160a01b03161461037357604051637465ded960e11b81526001600160a01b038086166004830152841660248201526044810183905260640161030c565b6001600160a01b0382166000908152600560209081526040808320848452909152812054610458904361068f565b905060005481111561048f57604051630a6957c560e31b81526001600160a01b03841660048201526024810183905260440161030c565b505050565b60006104a96001600160a01b038416836104f7565b905080516000141580156104ce5750808060200190518101906104cc91906106cd565b155b1561048f57604051635274afe760e01b81526001600160a01b038416600482015260240161030c565b60606105058383600061050c565b9392505050565b6060814710156105315760405163cd78605960e01b815230600482015260240161030c565b600080856001600160a01b0316848660405161054d91906106ef565b60006040518083038185875af1925050503d806000811461058a576040519150601f19603f3d011682016040523d82523d6000602084013e61058f565b606091505b509150915061059f8683836105a9565b9695505050505050565b6060826105be576105b982610605565b610505565b81511580156105d557506001600160a01b0384163b155b156105fe57604051639996b31560e01b81526001600160a01b038516600482015260240161030c565b5080610505565b8051156106155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b038116811461062e57600080fd5b6000806040838503121561065957600080fd5b823561066481610631565b946020939093013593505050565b60006020828403121561068457600080fd5b813561050581610631565b8181038181111561028b57634e487b7160e01b600052601160045260246000fd5b6000602082840312156106c257600080fd5b815161050581610631565b6000602082840312156106df57600080fd5b8151801515811461050557600080fd5b6000825160005b8181101561071057602081860181015185830152016106f6565b50600092019182525091905056fea264697066735822122086ad612e0e506ee627d0e32a4b0b9b73b6f5363e17e8ecc78090de18eea340a164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063884eaaea11610066578063884eaaea14610125578063be59cce314610138578063d038f2c614610141578063d583985a1461014a578063dabd51021461016a57600080fd5b80632c4d1a49146100a35780632d3762c0146100be578063481531e9146100c65780635c6195e8146100f157806386192d011461011c575b600080fd5b6100ab61017d565b6040519081526020015b60405180910390f35b6100ab6101e4565b6001546100d9906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6100ab6100ff366004610646565b600560209081526000928352604080842090915290825290205481565b6100ab60025481565b6100ab610133366004610646565b610204565b6100ab60005481565b6100ab60035481565b6100ab610158366004610672565b60046020526000908152604090205481565b6100ab610178366004610646565b610291565b6000610188336102bd565b6003546001546101a7916001600160a01b039091169033903090610319565b33600081815260046020526040808220439055517f7b5c464bc5b5d9f749f7a2af770c5a8ef3cc7edd8b9efa875112bbd69255fd8e9190a2504390565b6002546001546000916101a7916001600160a01b03169033903090610319565b6000610211338484610379565b61021b838361042a565b60035460015461023a916001600160a01b039091169033903090610319565b6001600160a01b0383166000818152600560209081526040808320868452909152808220439055518492917f1b1920a7f91d6b0fd205bb210302351b28e6e8a9178571676f7da29e84500aeb91a350435b92915050565b600061029e338484610379565b60025460015461023a916001600160a01b039091169033903090610319565b6001600160a01b0381166000908152600460205260408120546102e0904361068f565b90506000548111156103155760405163afa07b8160e01b81526001600160a01b03831660048201526024015b60405180910390fd5b5050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610373908590610494565b50505050565b6040516331a9108f60e11b81526004810182905282906001600160a01b038581169190831690636352211e90602401602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e991906106b0565b6001600160a01b03161461037357604051637465ded960e11b81526001600160a01b038086166004830152841660248201526044810183905260640161030c565b6001600160a01b0382166000908152600560209081526040808320848452909152812054610458904361068f565b905060005481111561048f57604051630a6957c560e31b81526001600160a01b03841660048201526024810183905260440161030c565b505050565b60006104a96001600160a01b038416836104f7565b905080516000141580156104ce5750808060200190518101906104cc91906106cd565b155b1561048f57604051635274afe760e01b81526001600160a01b038416600482015260240161030c565b60606105058383600061050c565b9392505050565b6060814710156105315760405163cd78605960e01b815230600482015260240161030c565b600080856001600160a01b0316848660405161054d91906106ef565b60006040518083038185875af1925050503d806000811461058a576040519150601f19603f3d011682016040523d82523d6000602084013e61058f565b606091505b509150915061059f8683836105a9565b9695505050505050565b6060826105be576105b982610605565b610505565b81511580156105d557506001600160a01b0384163b155b156105fe57604051639996b31560e01b81526001600160a01b038516600482015260240161030c565b5080610505565b8051156106155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b038116811461062e57600080fd5b6000806040838503121561065957600080fd5b823561066481610631565b946020939093013593505050565b60006020828403121561068457600080fd5b813561050581610631565b8181038181111561028b57634e487b7160e01b600052601160045260246000fd5b6000602082840312156106c257600080fd5b815161050581610631565b6000602082840312156106df57600080fd5b8151801515811461050557600080fd5b6000825160005b8181101561071057602081860181015185830152016106f6565b50600092019182525091905056fea264697066735822122086ad612e0e506ee627d0e32a4b0b9b73b6f5363e17e8ecc78090de18eea340a164736f6c63430008140033",
  "devdoc": {
    "author": "Moonstream Engineering (engineering@moonstream.to) A Bandit implements a fully on-chain single-player fog-of-war mechanic that produces RNG via two player-submitted transactions. First, a player submits a transaction expressing their intent to generate RNG. Second, the player submits a transaction that uses RNG derived from the block hash of their first transaction. The player has a limited number of blocks to submit the second transaction. If they fail to submit it in time, the entropy is wasted. The player may also elect to re-roll RNG by submitting a new transaction before the block deadline in which they pay a fee to re-roll. If they elect to do this, the block hash of the block in which the transaction representing their intent to re-roll is used as the new source of entropy. The block deadline is then calculated from this transaction block.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "title": "Degen Trail bandit contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5796,
        "contract": "contracts/Bandit.sol:Bandit",
        "label": "BlocksToAct",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5799,
        "contract": "contracts/Bandit.sol:Bandit",
        "label": "FeeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1276"
      },
      {
        "astId": 5801,
        "contract": "contracts/Bandit.sol:Bandit",
        "label": "RollFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5803,
        "contract": "contracts/Bandit.sol:Bandit",
        "label": "RerollFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5807,
        "contract": "contracts/Bandit.sol:Bandit",
        "label": "LastRollForPlayer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5813,
        "contract": "contracts/Bandit.sol:Bandit",
        "label": "LastRollForNFT",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1276": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}